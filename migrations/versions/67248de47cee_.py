"""empty message

Revision ID: 67248de47cee
Revises: 
Create Date: 2017-08-21 04:40:24.899964

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '67248de47cee'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('module',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('author', sa.String(length=1024), nullable=True),
    sa.Column('serial', sa.Integer(), nullable=True),
    sa.Column('parent', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('type', sa.String(length=50), nullable=True),
    sa.Column('children', sa.Integer(), nullable=True),
    sa.Column('location', sa.String(length=200), nullable=True),
    sa.Column('expires_in', sa.Integer(), nullable=True),
    sa.Column('is_ready', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['parent'], ['module.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('parent', 'serial', name='_parent_serial_uc')
    )
    op.create_table('role',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('password', sa.String(length=255), nullable=True),
    sa.Column('sex', sa.String(length=1), nullable=True),
    sa.Column('city', sa.String(length=40), nullable=True),
    sa.Column('state', sa.String(length=40), nullable=True),
    sa.Column('country', sa.String(length=40), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('confirmed_at', sa.DateTime(), nullable=True),
    sa.Column('last_login_at', sa.DateTime(), nullable=True),
    sa.Column('current_login_at', sa.DateTime(), nullable=True),
    sa.Column('last_login_ip', sa.String(length=45), nullable=True),
    sa.Column('current_login_ip', sa.String(length=45), nullable=True),
    sa.Column('login_count', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('course_data',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('duration_weeks', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['module.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('course_progress',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('modified_at', sa.DateTime(), nullable=True),
    sa.Column('is_complete', sa.Boolean(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('completed_segments', sa.Integer(), nullable=True),
    sa.Column('total_points', sa.Integer(), nullable=True),
    sa.Column('scored_points', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('module_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['module.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('module_id', 'user_id', name='module_user_course_pk')
    )
    op.create_table('course_stats',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('modified_at', sa.DateTime(), nullable=True),
    sa.Column('current_students', sa.Integer(), nullable=True),
    sa.Column('students', sa.Integer(), nullable=True),
    sa.Column('module_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['module.id'], ),
    sa.PrimaryKeyConstraint('module_id')
    )
    op.create_table('lecture_progress',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('modified_at', sa.DateTime(), nullable=True),
    sa.Column('is_complete', sa.Boolean(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('downloads', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('module_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['module.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('module_id', 'user_id', name='module_user_lecture_pk')
    )
    op.create_table('lecture_stats',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('modified_at', sa.DateTime(), nullable=True),
    sa.Column('downloads', sa.Integer(), nullable=True),
    sa.Column('module_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['module.id'], ),
    sa.PrimaryKeyConstraint('module_id')
    )
    op.create_table('quiz_progress',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('modified_at', sa.DateTime(), nullable=True),
    sa.Column('is_complete', sa.Boolean(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('passing_points', sa.Integer(), nullable=True),
    sa.Column('awarded_points', sa.Integer(), nullable=True),
    sa.Column('passing_percent', sa.Float(), nullable=True),
    sa.Column('awarded_percent', sa.Float(), nullable=True),
    sa.Column('total_points', sa.Integer(), nullable=True),
    sa.Column('duration', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('module_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['module.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('module_id', 'user_id', name='module_user_quiz_pk')
    )
    op.create_table('quiz_stats',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('modified_at', sa.DateTime(), nullable=True),
    sa.Column('attempts', sa.Integer(), nullable=True),
    sa.Column('max_score', sa.Float(), nullable=True),
    sa.Column('avg_score', sa.Float(), nullable=True),
    sa.Column('duration', sa.BigInteger(), nullable=True),
    sa.Column('module_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['module.id'], ),
    sa.PrimaryKeyConstraint('module_id')
    )
    op.create_table('roles_users',
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], )
    )
    op.create_table('segment_progress',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('modified_at', sa.DateTime(), nullable=True),
    sa.Column('is_complete', sa.Boolean(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('completed_modules', sa.Integer(), nullable=True),
    sa.Column('total_points', sa.Integer(), nullable=True),
    sa.Column('scored_points', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('module_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['module.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('module_id', 'user_id', name='module_user_segment_pk')
    )
    op.create_table('segment_stats',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('modified_at', sa.DateTime(), nullable=True),
    sa.Column('current_students', sa.Integer(), nullable=True),
    sa.Column('students', sa.Integer(), nullable=True),
    sa.Column('module_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['module.id'], ),
    sa.PrimaryKeyConstraint('module_id')
    )
    op.create_table('video_progress',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('modified_at', sa.DateTime(), nullable=True),
    sa.Column('is_complete', sa.Boolean(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('views', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('module_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['module.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('module_id', 'user_id', name='module_user_video_pk')
    )
    op.create_table('video_stats',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('modified_at', sa.DateTime(), nullable=True),
    sa.Column('views', sa.Integer(), nullable=True),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('module_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['module.id'], ),
    sa.PrimaryKeyConstraint('module_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('video_stats')
    op.drop_table('video_progress')
    op.drop_table('segment_stats')
    op.drop_table('segment_progress')
    op.drop_table('roles_users')
    op.drop_table('quiz_stats')
    op.drop_table('quiz_progress')
    op.drop_table('lecture_stats')
    op.drop_table('lecture_progress')
    op.drop_table('course_stats')
    op.drop_table('course_progress')
    op.drop_table('course_data')
    op.drop_table('user')
    op.drop_table('role')
    op.drop_table('module')
    # ### end Alembic commands ###
